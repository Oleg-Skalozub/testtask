// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Oleg-Skalozub/testtask/src/domain/services (interfaces: Fetcher)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "github.com/Oleg-Skalozub/testtask/src/domain/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFetcher is a mock of Fetcher interface
type MockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherMockRecorder
}

// MockFetcherMockRecorder is the mock recorder for MockFetcher
type MockFetcherMockRecorder struct {
	mock *MockFetcher
}

// NewMockFetcher creates a new mock instance
func NewMockFetcher(ctrl *gomock.Controller) *MockFetcher {
	mock := &MockFetcher{ctrl: ctrl}
	mock.recorder = &MockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFetcher) EXPECT() *MockFetcherMockRecorder {
	return m.recorder
}

// FetchData mocks base method
func (m *MockFetcher) FetchData(arg0, arg1 int) ([]entity.DataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchData", arg0, arg1)
	ret0, _ := ret[0].([]entity.DataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchData indicates an expected call of FetchData
func (mr *MockFetcherMockRecorder) FetchData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchData", reflect.TypeOf((*MockFetcher)(nil).FetchData), arg0, arg1)
}

// GetData mocks base method
func (m *MockFetcher) GetData(arg0, arg1 int) ([]entity.DataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", arg0, arg1)
	ret0, _ := ret[0].([]entity.DataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData
func (mr *MockFetcherMockRecorder) GetData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockFetcher)(nil).GetData), arg0, arg1)
}

// SaveData mocks base method
func (m *MockFetcher) SaveData(arg0, arg1, arg2 int, arg3 []entity.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveData", arg0, arg1, arg2, arg3)
}

// SaveData indicates an expected call of SaveData
func (mr *MockFetcherMockRecorder) SaveData(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveData", reflect.TypeOf((*MockFetcher)(nil).SaveData), arg0, arg1, arg2, arg3)
}
