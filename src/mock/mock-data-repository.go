// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Oleg-Skalozub/testtask/src/domain/repository (interfaces: DataRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "github.com/Oleg-Skalozub/testtask/src/domain/entity"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDataRepository is a mock of DataRepository interface
type MockDataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDataRepositoryMockRecorder
}

// MockDataRepositoryMockRecorder is the mock recorder for MockDataRepository
type MockDataRepositoryMockRecorder struct {
	mock *MockDataRepository
}

// NewMockDataRepository creates a new mock instance
func NewMockDataRepository(ctrl *gomock.Controller) *MockDataRepository {
	mock := &MockDataRepository{ctrl: ctrl}
	mock.recorder = &MockDataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataRepository) EXPECT() *MockDataRepositoryMockRecorder {
	return m.recorder
}

// GetData mocks base method
func (m *MockDataRepository) GetData(arg0, arg1 int) ([]entity.DataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", arg0, arg1)
	ret0, _ := ret[0].([]entity.DataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData
func (mr *MockDataRepositoryMockRecorder) GetData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockDataRepository)(nil).GetData), arg0, arg1)
}

// SaveData mocks base method
func (m *MockDataRepository) SaveData(arg0, arg1, arg2 int, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveData", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveData indicates an expected call of SaveData
func (mr *MockDataRepositoryMockRecorder) SaveData(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveData", reflect.TypeOf((*MockDataRepository)(nil).SaveData), arg0, arg1, arg2, arg3, arg4)
}
