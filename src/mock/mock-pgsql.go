// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Oleg-Skalozub/testtask/src/infrastructure/db (interfaces: SQLBDer)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
	reflect "reflect"
)

// MockSQLBDer is a mock of SQLBDer interface
type MockSQLBDer struct {
	ctrl     *gomock.Controller
	recorder *MockSQLBDerMockRecorder
}

// MockSQLBDerMockRecorder is the mock recorder for MockSQLBDer
type MockSQLBDerMockRecorder struct {
	mock *MockSQLBDer
}

// NewMockSQLBDer creates a new mock instance
func NewMockSQLBDer(ctrl *gomock.Controller) *MockSQLBDer {
	mock := &MockSQLBDer{ctrl: ctrl}
	mock.recorder = &MockSQLBDerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSQLBDer) EXPECT() *MockSQLBDerMockRecorder {
	return m.recorder
}

// AutoMigrate mocks base method
func (m *MockSQLBDer) AutoMigrate(arg0 interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoMigrate", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// AutoMigrate indicates an expected call of AutoMigrate
func (mr *MockSQLBDerMockRecorder) AutoMigrate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoMigrate", reflect.TypeOf((*MockSQLBDer)(nil).AutoMigrate), arg0)
}

// Close mocks base method
func (m *MockSQLBDer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockSQLBDerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSQLBDer)(nil).Close))
}

// Group mocks base method
func (m *MockSQLBDer) Group(arg0 string) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Group", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Group indicates an expected call of Group
func (mr *MockSQLBDerMockRecorder) Group(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockSQLBDer)(nil).Group), arg0)
}

// Save mocks base method
func (m *MockSQLBDer) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockSQLBDerMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSQLBDer)(nil).Save), arg0)
}

// Select mocks base method
func (m *MockSQLBDer) Select(arg0 interface{}, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Select indicates an expected call of Select
func (mr *MockSQLBDerMockRecorder) Select(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockSQLBDer)(nil).Select), varargs...)
}

// Table mocks base method
func (m *MockSQLBDer) Table(arg0 string) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Table", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Table indicates an expected call of Table
func (mr *MockSQLBDerMockRecorder) Table(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockSQLBDer)(nil).Table), arg0)
}

// Where mocks base method
func (m *MockSQLBDer) Where(arg0 interface{}, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Where indicates an expected call of Where
func (mr *MockSQLBDerMockRecorder) Where(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockSQLBDer)(nil).Where), varargs...)
}
